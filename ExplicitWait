using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
//This library has to be imported in order to integrate Explicit waits
using OpenQA.Selenium.Support.UI;

namespace Waits
{
    public class WebDriverWaitExplicit
    {
        private WebDriver driver;
        //Defined here
        private WebDriverWait wait;
        private const string BaseUrl = "http://uitestpractice.com/";

        [SetUp]
        public void Setup()
        {
            driver = new ChromeDriver();
            driver.Manage().Window.Maximize();
            driver.Url = BaseUrl;

        }
        [TearDown]
        public void CloseBrowser()
        {
            driver.Quit();
        }

        [Test]
        public void Wait_Implicit()
        {
            //Defined in the test itself
            this.wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));

            var AjaxLink = driver.FindElement(By.LinkText("AjaxCall"));
            AjaxLink.Click();

            var internalAjaxLink = driver.FindElement(By.LinkText("This is a Ajax link"));
            internalAjaxLink.Click();

            //Wait element which explicitly points to the element that we want to find
            var textElementText = wait.Until(d =>
            {
                return d.FindElement(By.ClassName("ContactUs")).Text;
            }
            );


            Assert.That(textElementText.Contains("Selenium is a portable software testing"));

            driver.Navigate().Refresh();

            internalAjaxLink = driver.FindElement(By.LinkText("This is a Ajax link"));
            internalAjaxLink.Click();

            //Wait element which explicitly points to the element that we want to find after refreshing the page
            textElementText = wait.Until(d =>
            {
                return d.FindElement(By.ClassName("ContactUs")).Text;
            }
            );

            Assert.That(textElementText.Contains("Selenium is a portable software testing"));
        }

    }
}
